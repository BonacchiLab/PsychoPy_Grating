<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="False" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1280, 720]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'contrast': '30', 'side': '29', 'response': '28', 'eval': '27', 'correct': '26', 'rt': '25', 'score': '24', 'block_type': '23', 'num_trials': '22', 'thisRow.t': '1'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="data" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="gratingHA_v16.0" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="data" valType="code" updates="None" name="logging level"/>
    <Param val="False" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="priority" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="intro">
      <RoutineSettingsComponent name="intro" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="intro" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_init" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_init" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In this task, you will see a visual stimulus appear on the screen&amp;#10;&amp;#10;Your goal is to determine whether the stimulus is on the left side (Press &quot;D&quot;) or right side (Press &quot;K&quot;)&amp;#10;&amp;#10;Keep your eyes focused on the cross in the center of the screen at all times&amp;#10;&amp;#10;Press ENTER to begin the warm-up session&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_init" plugin="None">
        <Param val="'return'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_init" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_4" plugin="None">
        <Param val="import os&amp;#10;import pandas as pd" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="participant = expInfo['participant']&amp;#10;&amp;#10;metadata = pd.read_csv('participant_sessions.csv', index_col='participant')&amp;#10;participant_sessions = metadata.loc[participant].tolist()&amp;#10;&amp;#10;participant_data_folder = os.path.join('data', participant)&amp;#10;os.makedirs(participant_data_folder, exist_ok=True)&amp;#10;&amp;#10;completed_sessions = len([&amp;#10;    f for f in os.listdir(participant_data_folder)&amp;#10;    if f.endswith('.csv')&amp;#10;])&amp;#10;&amp;#10;if completed_sessions &lt; len(participant_sessions):&amp;#10;    current_session_file = os.path.join('sessions', participant_sessions[completed_sessions] + '.csv')&amp;#10;else:&amp;#10;    raise RuntimeError(&quot;All sessions completed.&quot;)&amp;#10;    &amp;#10;thisExp.addData(&quot;session&quot;, participant_sessions[completed_sessions])&amp;#10;filename = os.path.join(participant_data_folder, f'{participant_sessions[completed_sessions]}.csv')&amp;#10;thisExp = data.ExperimentHandler(dataFileName=filename)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Warmup">
      <RoutineSettingsComponent name="Warmup" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Warmup" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="import random" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="contrast_levels = [1.00, 0.25, 0.12, 0.06, 0.00]&amp;#10;xside = [&quot;Left&quot;, &quot;Right&quot;]&amp;#10;score=0&amp;#10;prev=1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="contrast_levels = [0.5, 0.25, 0.12, 0.06, 0.0];&amp;#10;xside = [&quot;Left&quot;, &quot;Right&quot;];&amp;#10;score = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="contrast = Math.random.choice(contrast_levels);&amp;#10;side = Math.random.choice(xside);&amp;#10;if ((trials.thisTrialN === 0)) {&amp;#10;    score = 0;&amp;#10;}&amp;#10;if ((side === &quot;Left&quot;)) {&amp;#10;    position_x = (- 0.5);&amp;#10;    correct = &quot;d&quot;;&amp;#10;} else {&amp;#10;    if ((side === &quot;Right&quot;)) {&amp;#10;        position_x = 0.5;&amp;#10;        correct = &quot;k&quot;;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="contrast = random.choice(contrast_levels)&amp;#10;side = random.choice(xside)&amp;#10;&amp;#10;&amp;#10;if trials.thisTrialN==0:&amp;#10;    score=0&amp;#10;&amp;#10;if side == &quot;Left&quot;:&amp;#10;    position_x = -0.5&amp;#10;    correct =  'd'&amp;#10;elif side == &quot;Right&quot;:&amp;#10;    position_x = 0.5&amp;#10;    correct =  'k'&amp;#10;    &amp;#10;start=0.2+random.uniform(0.2,0.5)&amp;#10;&amp;#10;start_cue=core.getTime()+start&amp;#10;duration=0.1  #audio &amp;#10;sr = 48000&amp;#10;t = np.arange(0, duration, 1/sr)&amp;#10;tone = np.sin(2 * np.pi * 2000 * t)  #2000hz&amp;#10;stereo = np.stack([tone, tone], axis=1)&amp;#10;feedback_sound = sound.Sound(value=stereo, sampleRate=sr, stereo=True, hamming=False)&amp;#10;feedback_sound.play(when=start_cue)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((! key_resp.keys)) {&amp;#10;    psychoJS.experiment.addData(&quot;response&quot;, &quot;None&quot;);&amp;#10;    key_resp.corr = 0;&amp;#10;    eval = 2;&amp;#10;} else {&amp;#10;    psychoJS.experiment.addData(&quot;response&quot;, key_resp.keys);&amp;#10;    eval = key_resp.corr;&amp;#10;}&amp;#10;if ((eval === 1)) {&amp;#10;    score += 1;&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;contrast&quot;, contrast);&amp;#10;psychoJS.experiment.addData(&quot;side&quot;, side);&amp;#10;psychoJS.experiment.addData(&quot;answer&quot;, key_resp.corr);&amp;#10;psychoJS.experiment.addData(&quot;eval&quot;, eval);&amp;#10;psychoJS.experiment.addData(&quot;score&quot;, score);&amp;#10;psychoJS.experiment.addData(&quot;rt&quot;, (key_resp.rt ? key_resp.rt : &quot;None&quot;));&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if not key_resp.keys:&amp;#10;      thisExp.addData(&quot;response&quot;, &quot;None&quot;)&amp;#10;      key_resp.corr=0   &amp;#10;      eval=2&amp;#10;else:&amp;#10;     thisExp.addData(&quot;response&quot;, key_resp.keys)&amp;#10;     eval=key_resp.corr&amp;#10;&amp;#10;&amp;#10;if eval==1:&amp;#10;    score+=1&amp;#10;&amp;#10;if key_resp.corr==0:&amp;#10;    prev=0 &amp;#10;    #wait=2.0&amp;#10;else:&amp;#10;    prev=1&amp;#10;    #wait=0.5&amp;#10;&amp;#10;&amp;#10;thisExp.addData(&quot;contrast&quot;, contrast)&amp;#10;thisExp.addData(&quot;side&quot;, side)&amp;#10;&amp;#10;thisExp.addData(&quot;correct&quot;, key_resp.corr)    #em answer nao resposta=0 &amp;#10;thisExp.addData(&quot;eval&quot;, eval)               #em eval nao resposta=2&amp;#10;thisExp.addData(&quot;score&quot;, score)&amp;#10;thisExp.addData(&quot;rt&quot;, key_resp.rt if key_resp.rt else &quot;None&quot;)&amp;#10;thisExp.addData(&quot;block_type&quot;,&quot;B_50:50&quot;)&amp;#10;thisExp.addData(&quot;warmup&quot;,&quot;warmup&quot;)&amp;#10;thisExp.addData(&quot;start&quot;,start)&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <GratingComponent name="grating" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="avg" valType="str" updates="constant" name="blendmode"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="contrast" valType="num" updates="set every repeat" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="gauss" valType="file" updates="constant" name="mask"/>
        <Param val="grating" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="random.random()" valType="num" updates="constant" name="phase"/>
        <Param val="(position_x, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="7" valType="num" updates="constant" name="sf"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="start" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="sin" valType="file" updates="constant" name="tex"/>
        <Param val="512" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </GratingComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'d','k'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="start" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <PolygonComponent name="polygon" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="60.2" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="45" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.04, 0.04)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="start+60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="polygon_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="60.2" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="135" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.04, 0.04)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="start+60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SoundComponent name="sound_2" plugin="None">
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="hamming"/>
        <Param val="sound_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="2000" valType="str" updates="set every repeat" name="sound"/>
        <Param val="-1" valType="code" updates="None" name="speakerIndex"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="start" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="stopWithRoutine"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="1" valType="num" updates="constant" name="volume"/>
      </SoundComponent>
    </Routine>
    <Routine name="text">
      <RoutineSettingsComponent name="text" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Warm-up complete!&amp;#10;&amp;#10;You are now starting the main task&amp;#10;&amp;#10;Focus on the fixation cross and respond as accurately as possible&amp;#10;&amp;#10;Press ENTER to begin&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_init_2" plugin="None">
        <Param val="'return'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_init_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Task">
      <RoutineSettingsComponent name="Task" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Task" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_6" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="contrast_levels = [0.5, 0.25, 0.12, 0.06, 0.0];&amp;#10;xside = [&quot;Left&quot;, &quot;Right&quot;];&amp;#10;score = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="contrast = Math.random.choice(contrast_levels);&amp;#10;side = Math.random.choice(xside);&amp;#10;if ((trials.thisTrialN === 0)) {&amp;#10;    score = 0;&amp;#10;}&amp;#10;if ((side === &quot;Left&quot;)) {&amp;#10;    position_x = (- 0.5);&amp;#10;    correct = &quot;d&quot;;&amp;#10;} else {&amp;#10;    if ((side === &quot;Right&quot;)) {&amp;#10;        position_x = 0.5;&amp;#10;        correct = &quot;k&quot;;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#contrast = random.choice(contrast_levels)&amp;#10;#side = random.choice(xside)&amp;#10;&amp;#10;if trials_3.thisTrialN==0:   #reseta valores para novo loop&amp;#10;    score=0&amp;#10;    prev=1&amp;#10;&amp;#10;if _side == &quot;left&quot;:&amp;#10;    position_x = -0.5&amp;#10;    correct =  'd'&amp;#10;elif _side == &quot;right&quot;:&amp;#10;    position_x = 0.5&amp;#10;    correct =  'k'&amp;#10;    &amp;#10;start=0.2+random.uniform(0.2,0.5)&amp;#10;&amp;#10;start_cue=core.getTime()+start&amp;#10;duration=0.1  #audio &amp;#10;sr = 48000&amp;#10;t = np.arange(0, duration, 1/sr)&amp;#10;tone = np.sin(2 * np.pi * 2000 * t)  #2000hz&amp;#10;stereo = np.stack([tone, tone], axis=1)&amp;#10;feedback_sound = sound.Sound(value=stereo, sampleRate=sr, stereo=True, hamming=False)&amp;#10;feedback_sound.play(when=start_cue)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((! key_resp.keys)) {&amp;#10;    psychoJS.experiment.addData(&quot;response&quot;, &quot;None&quot;);&amp;#10;    key_resp.corr = 0;&amp;#10;    eval = 2;&amp;#10;} else {&amp;#10;    psychoJS.experiment.addData(&quot;response&quot;, key_resp.keys);&amp;#10;    eval = key_resp.corr;&amp;#10;}&amp;#10;if ((eval === 1)) {&amp;#10;    score += 1;&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;contrast&quot;, contrast);&amp;#10;psychoJS.experiment.addData(&quot;side&quot;, side);&amp;#10;psychoJS.experiment.addData(&quot;answer&quot;, key_resp.corr);&amp;#10;psychoJS.experiment.addData(&quot;eval&quot;, eval);&amp;#10;psychoJS.experiment.addData(&quot;score&quot;, score);&amp;#10;psychoJS.experiment.addData(&quot;rt&quot;, (key_resp.rt ? key_resp.rt : &quot;None&quot;));&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if not key_resp_3.keys:&amp;#10;      thisExp.addData(&quot;response&quot;, &quot;None&quot;)&amp;#10;      key_resp_3.corr=0   &amp;#10;      eval=2&amp;#10;else:&amp;#10;     thisExp.addData(&quot;response&quot;, key_resp_3.keys)&amp;#10;     eval=key_resp_3.corr&amp;#10;&amp;#10;if eval==1:&amp;#10;    score+=1&amp;#10;&amp;#10;if eval==0:&amp;#10;    prev=0&amp;#10;    #wait=2.0&amp;#10;else:&amp;#10;    prev=1&amp;#10;    #wait=0.5&amp;#10;&amp;#10;&amp;#10;&amp;#10;thisExp.addData(&quot;contrast&quot;, _contrast)&amp;#10;thisExp.addData(&quot;side&quot;, _side)&amp;#10;thisExp.addData(&quot;correct&quot;, key_resp_3.corr)    #nao resposta=0 &amp;#10;thisExp.addData(&quot;eval&quot;, eval)               #nao resposta=2 &amp;#10;thisExp.addData(&quot;score&quot;, score)&amp;#10;thisExp.addData(&quot;rt&quot;, key_resp_3.rt if key_resp_3.rt else &quot;None&quot;)&amp;#10;thisExp.addData(&quot;block_type&quot;,block_type)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_6" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <GratingComponent name="grating_3" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="avg" valType="str" updates="constant" name="blendmode"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="_contrast" valType="num" updates="set every repeat" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="gauss" valType="file" updates="constant" name="mask"/>
        <Param val="grating_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="random.random()" valType="num" updates="constant" name="phase"/>
        <Param val="(position_x, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="7" valType="num" updates="constant" name="sf"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="start" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="sin" valType="file" updates="constant" name="tex"/>
        <Param val="512" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </GratingComponent>
      <KeyboardComponent name="key_resp_3" plugin="None">
        <Param val="'d','k'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="start" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <PolygonComponent name="polygon_5" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="60.2" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="45" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.04, 0.04)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="start+60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="polygon_6" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="60.2" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="135" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.04, 0.04)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="start+60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SoundComponent name="sound_3" plugin="None">
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="hamming"/>
        <Param val="sound_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="2000" valType="str" updates="set every repeat" name="sound"/>
        <Param val="-1" valType="code" updates="None" name="speakerIndex"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="start" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="stopWithRoutine"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="1" valType="num" updates="constant" name="volume"/>
      </SoundComponent>
    </Routine>
    <Routine name="Feedback">
      <RoutineSettingsComponent name="Feedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="Feedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_3" plugin="None">
        <Param val="import numpy as np&amp;#10;from psychopy import sound" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((eval === 1)) {&amp;#10;    text_feedback = &quot;Correct!&quot;;&amp;#10;    psychoJS.window.color = &quot;green&quot;;&amp;#10;    sound_feedback = 400;&amp;#10;    volume = 1;&amp;#10;} else {&amp;#10;    if ((eval === 0)) {&amp;#10;        text_feedback = &quot;Wrong!&quot;;&amp;#10;        psychoJS.window.color = &quot;red&quot;;&amp;#10;        sound_feedback = 1000;&amp;#10;        volume = 1;&amp;#10;    } else {&amp;#10;        if ((eval === 2)) {&amp;#10;            text_feedback = &quot;No Response&quot;;&amp;#10;            volume = 0;&amp;#10;            sound_feedback = null;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.window.flip();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="try:&amp;#10;    if eval == 1:&amp;#10;        duration=1.6&amp;#10;        text_feedback = &quot;Correct!&quot;&amp;#10;        win.color = &quot;green&quot;&amp;#10;        duration_sound = 0.08&amp;#10;        sr = 48000&amp;#10;        t = np.arange(0, duration_sound, 1/sr)&amp;#10;        tone = np.sin(2 * np.pi * 4000 * t)&amp;#10;        stereo = np.stack([tone, tone], axis=1)&amp;#10;        feedback_sound = sound.Sound(value=stereo, sampleRate=sr, stereo=True, hamming=False)&amp;#10;        feedback_sound.play()&amp;#10;&amp;#10;    else:&amp;#10;        duration=2.0&amp;#10;        text_feedback = &quot;Wrong!&quot;&amp;#10;        win.color = &quot;red&quot;&amp;#10;        duration_sound = 0.5&amp;#10;        sr = 48000&amp;#10;        mono = np.random.uniform(-1, 1, int(sr * duration_sound))&amp;#10;        stereo = np.stack([mono, mono], axis=1)&amp;#10;        feedback_sound = sound.Sound(value=stereo, sampleRate=sr, stereo=True, hamming=False)&amp;#10;        feedback_sound.play()&amp;#10;        feedback_sound.play()&amp;#10;        &amp;#10;    win.flip()&amp;#10;except Exception as e:&amp;#10;    print(f&quot;⚠️ Error during feedback routine: {e}&quot;)&amp;#10;    core.quit()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.window.color = &quot;none&quot;;&amp;#10;psychoJS.window.flip();&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="win.color=&quot;none&quot;&amp;#10;win.flip()" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="duration" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$text_feedback + &quot;\n\nscore = &quot; + str(score)" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'side': 'Left', 'correct': 'd'}, {'side': 'Right', 'correct': 'k'}, {'side': None, 'correct': None}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Warmup"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="trials"/>
    <Routine name="text"/>
    <LoopInitiator loopType="TrialHandler" name="trials_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 1), ('block_type', 'B50_50')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 2), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 3), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 4), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 5), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 6), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 7), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 8), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 9), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 10), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 11), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 12), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 13), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 14), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.25), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 1.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 15), ('block_type', 'B20_80')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.06), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'right'), ('_contrast', 0.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.06), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.25), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 0.12), ('block_N', 16), ('block_type', 'B80_20')]), OrderedDict([('_side', 'left'), ('_contrast', 1.0), ('block_N', 16), ('block_type', 'B80_20')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$current_session_file" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Task"/>
    <Routine name="Feedback"/>
    <LoopTerminator name="trials_3"/>
  </Flow>
</PsychoPy2experiment>
